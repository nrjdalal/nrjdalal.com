{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "nui-theme-provider",
  "type": "registry:component",
  "dependencies": [
    "@remixicon/react",
    "next-themes",
    "react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/nui/theme-provider.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { RiContrast2Fill, RiMoonFill, RiSunFill } from \"@remixicon/react\"\nimport { ThemeProvider as NextThemesProvider, useTheme } from \"next-themes\"\nimport { useState } from \"react\"\n\nexport const ThemeToggle = () => {\n  const { theme, setTheme } = useTheme()\n  const [system, setSystem] = useState(false)\n\n  const smartToggle = () => {\n    if (theme === \"system\") {\n      const prefersDarkScheme = window.matchMedia(\n        \"(prefers-color-scheme: dark)\",\n      ).matches\n      setTheme(prefersDarkScheme ? \"light\" : \"dark\")\n      setSystem(false)\n    } else {\n      setTheme(\"system\")\n      setSystem(true)\n    }\n  }\n\n  return (\n    <Button\n      variant=\"ghost\"\n      className=\"aspect-square size-full rounded-none [&_svg]:size-5\"\n      onClick={smartToggle}\n      aria-label=\"Switch between system/light/dark version\"\n    >\n      {system ? (\n        <RiContrast2Fill aria-hidden=\"true\" />\n      ) : (\n        <>\n          <RiSunFill className=\"dark:hidden\" aria-hidden=\"true\" />\n          <RiMoonFill className=\"hidden dark:block\" aria-hidden=\"true\" />\n        </>\n      )}\n    </Button>\n  )\n}\n\nexport const ThemeProvider = ({\n  children,\n  ...props\n}: React.ComponentProps<typeof NextThemesProvider>) => {\n  return (\n    <NextThemesProvider\n      attribute=\"class\"\n      defaultTheme=\"system\"\n      enableSystem\n      disableTransitionOnChange\n      {...props}\n    >\n      {children}\n    </NextThemesProvider>\n  )\n}\n",
      "path": "src/components/nui/theme-provider.tsx"
    },
    {
      "type": "registry:ui",
      "target": "components/ui/button.tsx",
      "content": "import { cn } from \"@/lib/utils\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-sm hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-xs hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
      "path": "src/components/ui/button.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "path": "src/lib/utils.ts"
    }
  ]
}
